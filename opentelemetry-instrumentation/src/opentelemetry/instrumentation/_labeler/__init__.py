# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
OpenTelemetry Labeler
=====================

The labeler utility provides a way to add custom attributes to metrics generated by OpenTelemetry instrumentors. This supports enriching metrics with context-specific information available only after HTTP requests are received, at their origin rather than requiring downstream processing or additional metric calculations.

This was inspired by OpenTelemetry Go's net/http instrumentation Labeler
https://github.com/open-telemetry/opentelemetry-go-contrib/pull/306

Usage
-----

The labeler works within the context of an instrumented request or operation. Use ``get_labeler()`` to obtain a labeler instance for the current context, then add attributes using the ``add()`` or ``add_attributes()`` methods.

Example with Flask
------------------

Here's an example showing how to use the labeler with Flask instrumentation:

.. code-block:: python

    from flask import Flask
    from opentelemetry.instrumentation._labeler import get_labeler
    from opentelemetry.instrumentation.flask import FlaskInstrumentor

    app = Flask(__name__)
    FlaskInstrumentor().instrument_app(app)

    @app.route("/healthcheck")
    def healthcheck():
        # Get the labeler for the current request
        labeler = get_labeler()

        labeler.add_attributes(
            {
                "endpoint_type": "healthcheck",
                "internal_request": True,
            }
        )
        return "OK"

    @app.route("/user/<user_id>")
    def user_profile(user_id):
        labeler = get_labeler()

        # Can add individual attributes or multiple at once
        labeler.add("user_id", user_id)
        labeler.add_attributes(
            {
                "has_premium": user_id in ["123", "456"],
                "experiment_group": "control",
                "feature_enabled": True,
                "user_segment": "active",
            }
        )

        return f"Got user profile for {user_id}"

The labeler also works with auto-instrumentation and those instrumentors that have implemented custom attributes support for metrics.
"""

from opentelemetry.instrumentation._labeler._internal import (
    Labeler,
    clear_labeler,
    enhance_metric_attributes,
    get_labeler,
    get_labeler_attributes,
    set_labeler,
)

__all__ = [
    "Labeler",
    "get_labeler",
    "set_labeler",
    "clear_labeler",
    "get_labeler_attributes",
    "enhance_metric_attributes",
]
